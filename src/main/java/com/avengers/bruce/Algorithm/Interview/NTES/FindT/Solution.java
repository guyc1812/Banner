package com.avengers.bruce.Algorithm.Interview.NTES.FindT;

/*****
 * Created by apple on 2017/12/10.
 */
public class Solution {

    public static void main(String[] args) {

        char[][] in = {
                {'.', '#', '#', '#', '#', '#', '#', '#'},
                {'.', '.', '.', '.', '#', '.', '.', '.'},
                {'.', '.', '.', '.', '#', '.', '.', '.'},
                {'.', '.', '.', '.', '#', '.', '.', '.'},
                {'#', '.', '.', '.', '#', '.', '.', '.'},
                {'#', '.', '.', '.', '.', '.', '.', '.'},
                {'#', '.', '.', '.', '.', '.', '.', '.'},
                {'#', '#', '#', '#', '#', '.', '.', '.'},
                {'#', '.', '.', '.', '.', '.', '.', '.'},
                {'#', '.', '.', '.', '.', '.', '.', '.'},
                {'#', '.', '.', '.', '.', '.', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '#', '.'},
                {'.', '.', '#', '#', '#', '#', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '#', '.'}
        };
        System.out.println(find(in));
    }


    public static int find(char[][] in){

        int N = in.length;
        int M = in[0].length;

        int count = 0;

        char[][] t1 = {
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '#', '#', '#', '#', '#', '#', '#', '.'},
                {'.', '.', '.', '.', '#', '.', '.', '.', '.'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '.', '.', '0', '0', '0'},
        };

        char[][] t2 = {
                {'0', '0', '0', '.', '.', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'0', '0', '0', '.', '#', '.', '0', '0', '0'},
                {'.', '.', '.', '.', '#', '.', '.', '.', '.'},
                {'.', '#', '#', '#', '#', '#', '#', '#', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        };

        char[][] t3 = {
                {'.', '.', '.', '0', '0', '0', '0'},
                {'.', '#', '.', '0', '0', '0', '0'},
                {'.', '#', '.', '0', '0', '0', '0'},
                {'.', '#', '.', '.', '.', '.', '.'},
                {'.', '#', '#', '#', '#', '#', '.'},
                {'.', '#', '.', '.', '.', '.', '.'},
                {'.', '#', '.', '0', '0', '0', '0'},
                {'.', '#', '.', '0', '0', '0', '0'},
                {'.', '.', '.', '0', '0', '0', '0'},
        };

        char[][] t4 = {
                {'0', '0', '0', '0', '.', '.', '.'},
                {'0', '0', '0', '0', '.', '#', '.'},
                {'0', '0', '0', '0', '.', '#', '.'},
                {'.', '.', '.', '.', '.', '#', '.'},
                {'.', '#', '#', '#', '#', '#', '.'},
                {'.', '.', '.', '.', '.', '#', '.'},
                {'0', '0', '0', '0', '.', '#', '.'},
                {'0', '0', '0', '0', '.', '#', '.'},
                {'0', '0', '0', '0', '.', '.', '.'},
        };


        char[][] inn = suround(in,N,M);

        count+=findSingle(inn,t1,N,M);
        count+=findSingle(inn,rotate90(t1),N,M);
        count+=findSingle(inn,rotate90(rotate90(t1)),N,M);
        count+=findSingle(inn,rotate90(rotate90(rotate90(t1))),N,M);

        return count;
    }

    public static char[][] suround(char[][] in, int N, int M){

        char[][] inn = new char[N + 2][M + 2];

        for (int i = 0; i < N + 2; i++) {
            for (int j = 0; j < M + 2; j++) {

                // surround with '.'
                if (i == 0 || i == N + 1 || j == 0 || j == M + 1) {
                    inn[i][j] = '.';
                }
                // input matrix in the center
                if (i > 0 && i < N + 1 && j > 0 && j < M + 1) {
                    inn[i][j] = in[i - 1][j - 1];
                }
                System.out.print(inn[i][j]);
            }
            System.out.println();
        }

//        System.out.println(Arrays.toString(inn));
        return inn;

    }

    public static int findSingle(char[][] inn,char[][] alph, int N, int M){

        int r = alph.length;
        int c = alph[0].length;
        int count = 0;

        for (int i = 0; i < N + 2 - r +1; i++) {
            for (int j = 0; j < M + 2 - c + 1; j++) {

                boolean flag = true;
                w:for (int k = 0; k < r; k++) {
                    for (int l = 0; l < c; l++) {
                        if ((alph[k][l]!='0')&&(inn[i+k][j+l]!=alph[k][l])) {
                            flag = false;
                            break w;
                        }
                    }
                }
                if(flag){
                    count++;
                }
            }
        }

        return count;
    }


    public static char[][] rotate90(char[][] in) {
        int m = in.length, n = in[0].length;

        char[][] res = new char[n][m];

        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) {
                res[j][m - 1 - i] = in[i][j];
            }
        return res;
    }
}
